커넥터는 Runable구현으로 쓰레드를 만들어서 사용한다.
파라미터의 수정방지를 위해서 parameterMap을 사용한다. 


실제 톰캣은 요청을 파싱하는 커넥터와 처리하는 컨테이너로 분리된다. 
이중에 커넥터가 어떻게 되어있는지 알아본다. 
> 메시지는 StringManager라는 것으로 다국어를 처리하도록 관리된다.
> 커넥터를 실행시키는 부트스트립, 요청을 기다리는 커넥터, 요청을 서블릿과 분리시키는 HttpProcess
>> Request와 Response도 HttpProcess가 한다.
>> 쓰레드를 생성하여서 실행
>> Runnable을 사용하여서 커넥터자체를 쓰레드화시킨다.
> Request와 Response가 처리하는것에 대해서 더 자세히 알아본다.
>> Request : 헤더파싱, 쿠키파싱, 파라미터 얻기
>>> 헤더에 쿠키와 파라미터가 모두 있을것인데.. 무슨차인지는 모르겠다.
>>> 헤더 : URI와 질의문분리, 세션ID 파싱, URI의 정규화(잘못된것 수정)
>>> 쿠키 : 헤더에 포함되어 있다.
>>> 파라미터 : GET일경우에는 질의문에서 POST는 본문에 있다.
>>>> 프로그래머는 HttpServletRequest의 getParameterMap을 통해서 이와는 상관없이 파라미터를 얻을수 있다.

궁금한것은 시작부터 쓰레드화 시킨다는데..이것이 언뜻 이해가 안된다. 
> 그럼 톰캣을 띄울때 1개의 쓰레드를 쓴다는 것인지.


음.. 안타깝게도 다따라하지 못했다.
한번해볼까?!!
<변화사항>
1. HttpServer가 HttpConnector와 HttpProcessor로 나뉘었다.
	- 정확하게는 Bootstrap에서 실행 하고 HttpConnector에서 쓰레드를 생성하여서 소켓통신을 대기시킨다.
	- 데이터가 오면 HttpProcessor에서 처리한다.
2. 요청을 InputStream이 아닌 SocketInputStream을 통해서 진행한다.
	- readRequestLine와 reqadRequestHeder가 강점이란다.
	- 또한 오류를 StringManager로 처리하여 다국어가 가능하도록 하게 한단다.
3. 파싱의 분리
	- parseRequest :1.요청라인길이확인,2.질의문확인,3.URI절대경로여부확,4.세션 ID 확인,5.URI정상여부 normalize()로 넘겨서 판단하기
		- HttpRequestLine에서 기본적인것 판단해서처리   
	- parseHeaders : 헤더정보와 쿠기정보를 처리한다.
	- normalize : URI이 정상인지 판단한다. 잘못된 URI는 수정도 한다. URI의 정규화라고 하는데 정상적으로 만드는 것같다. 		
4. HttpRequest, HttpResponse 라는 Http 전용을 사용한다.
	
* 서블릿 프로그래머는 HttpServletRequest의 getCookies, getDataHeader, getHeader, getHeaderNames, getHeaders, getParameter, getParameterMap, getParameterNames, getParameterValues로 
값을 요청자 정보를 받을수 있다.	

